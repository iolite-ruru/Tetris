#include<iostream> 
#include<stdlib.h> 
#include<time.h> 
#include<conio.h> 
#include<Windows.h> 
#include<string.h> 
#include<thread>
#include<fstream>
#include<istream>
#include<iomanip>
using namespace std;
//현재 x 마지막 값 51, y 마지막 값 38 
//벽 x:3~34 / y:2~31 
#define WIDTH  16 //게임판 가로 
#define HEIGHT 28 //게임판 세로 
#define COL 56 //콘솔창 가로 
#define LINE 40 //콘솔창 세로 
#define UP 72 
#define DOWN 80 
#define LEFT 75 
#define RIGHT 77 
int score = 0;
int speed = 1000;
int nextBlock; //미리 선언 해둬야 함 
int nextRotation;
int tetris[HEIGHT][WIDTH];
int tempTetris[HEIGHT][WIDTH] = { -1 };
bool exe;
int scoreUnit[] = { 800, 1500, 2100, 2600 };
int speedUnit[] = { 1000, 900, 800, 600 };
struct User {
	int rank;
	string name;
	int score;
}userData;
// l, ㅗ, z, s, L, L반대, ㅁ
const int BLOCK[7][4][4][4] = {
	{
		{
			0, 1, 0, 0,
			0, 1, 0, 0,
			0, 1, 0, 0,
			0, 1, 0, 0
		},
		{
			0, 0, 0, 0,
			1, 1, 1, 1,
			0, 0, 0, 0,
			0, 0, 0, 0
		},
		{
			0, 1, 0, 0,
			0, 1, 0, 0,
			0, 1, 0, 0,
			0, 1, 0, 0
		},
		{
			0, 0, 0, 0,
			1, 1, 1, 1,
			0, 0, 0, 0,
			0, 0, 0, 0
		}
	},
	{
		{
			0, 1, 0, 0,
			1, 1, 1, 0,
			0, 0, 0, 0,
			0, 0, 0, 0
		},
		{
			0, 1, 0, 0,
			0, 1, 1, 0,
			0, 1, 0, 0,
			0, 0, 0, 0
		},
		{
			0, 0, 0, 0,
			1, 1, 1, 0,
			0, 1, 0, 0,
			0, 0, 0, 0
		},
		{
			0, 1, 0, 0,
			1, 1, 0, 0,
			0, 1, 0, 0,
			0, 0, 0, 0
		}
	},
	{
		{
			1, 1, 0, 0,
			0, 1, 1, 0,
			0, 0, 0, 0,
			0, 0, 0, 0
		},
		{
			0, 0, 1, 0,
			0, 1, 1, 0,
			0, 1, 0, 0,
			0, 0, 0, 0
		},
		{
			1, 1, 0, 0,
			0, 1, 1, 0,
			0, 0, 0, 0,
			0, 0, 0, 0
		},
		{
			0, 0, 1, 0,
			0, 1, 1, 0,
			0, 1, 0, 0,
			0, 0, 0, 0
		}
	},
	{
		{
			0, 1, 1, 0,
			1, 1, 0, 0,
			0, 0, 0, 0,
			0, 0, 0, 0
		},
		{
			0, 1, 0, 0,
			0, 1, 1, 0,
			0, 0, 1, 0,
			0, 0, 0, 0
		},
		{
			0, 1, 1, 0,
			1, 1, 0, 0,
			0, 0, 0, 0,
			0, 0, 0, 0
		},
		{
			0, 1, 0, 0,
			0, 1, 1, 0,
			0, 0, 1, 0,
			0, 0, 0, 0
		}
	},
	{
		{
			1, 0, 0, 0,
			1, 0, 0, 0,
			1, 1, 0, 0,
			0, 0, 0, 0
		},
		{
			0, 0, 0, 0,
			1, 1, 1, 0,
			1, 0, 0, 0,
			0, 0, 0, 0
		},
		{
			1, 1, 0, 0,
			0, 1, 0, 0,
			0, 1, 0, 0,
			0, 0, 0, 0
		},
		{
			0, 0, 1, 0,
			1, 1, 1, 0,
			0, 0, 0, 0,
			0, 0, 0, 0
		}
	},
	{
		{
			0, 1, 0, 0,
			0, 1, 0, 0,
			1, 1, 0, 0,
			0, 0, 0, 0
		},
		{
			1, 0, 0, 0,
			1, 1, 1, 0,
			0, 0, 0, 0,
			0, 0, 0, 0
		},
		{
			0, 1, 1, 0,
			0, 1, 0, 0,
			0, 1, 0, 0,
			0, 0, 0, 0
		},
		{
			0, 0, 0, 0,
			1, 1, 1, 0,
			0, 0, 1, 0,
			0, 0, 0, 0
		}
	},
	{
		{
			1, 1, 0, 0,
			1, 1, 0, 0,
			0, 0, 0, 0,
			0, 0, 0, 0
		},
		{
			1, 1, 0, 0,
			1, 1, 0, 0,
			0, 0, 0, 0,
			0, 0, 0, 0
		},
		{
			1, 1, 0, 0,
			1, 1, 0, 0,
			0, 0, 0, 0,
			0, 0, 0, 0
		},
		{
			1, 1, 0, 0,
			1, 1, 0, 0,
			0, 0, 0, 0,
			0, 0, 0, 0
		}
	}
};
void ShowCursor()
{
	CONSOLE_CURSOR_INFO cursor = { 0, };
	cursor.dwSize = 1; //커서 굵기 (1 ~ 100)
	cursor.bVisible = FALSE;
	SetConsoleCursorInfo(GetStdHandle(STD_OUTPUT_HANDLE), &cursor);
}
void GotoXY(int x, int y) {
	COORD coord; //COORD : x, y값을 가지는 구조체 타입 
	coord.X = x;
	coord.Y = y;
	SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), coord);
}
POINT GetXY() {
	POINT p;
	GetCursorPos(&p);
	return p;
}
int KeyInput() {
	char key = _getch();
	switch (toupper(key)) {
	case 'W': return UP;
	case 'S': return DOWN;
	case 'A': return LEFT;
	case 'D': return RIGHT;
	case 13: return 13;
	default: return -1;
	}
}
class Block {
public:
	int x, y, block, rotation, cnt; //x, y는 tetris 배열 내의 좌표라고 보는 것이 편함 
	//ㅇㅎ~! 그러면 벽도 포함하고 있는 거구나~!
	Block(int block, int rotation) {
	
		x = WIDTH / 2 - 1; //tetris의 0은 벽임
		y = 1;
		this->block = block;
		this->rotation = rotation;
		cnt = rotation;
		Draw();
	}
	void Draw() {
		for (int i = 0; i < 4; i++)
		{
			for (int j = 0; j < 4; j++)
			{
				if (BLOCK[block][GetRotation()][i][j] == 1 && tetris[y + i][x + j] == 0) tetris[y + i][x + j] = 1;
			}
		}
	}
	void Remove() {
		for (int i = 0; i < 4; i++)
		{
			for (int j = 0; j < 4; j++)
			{
				if (BLOCK[block][GetRotation()][i][j] == 1 && tetris[y + i][x + j] == 1) tetris[y + i][x + j] = 0;
			}
		}
		//RemoveBlock();
	}
	bool CheckLeft(int x, int y, int cnt) {
		for (int i = 0; i < 4; i++) //행
		{
			for (int j = 0; j < 4; j++) //열
			{
				if (BLOCK[block][cnt % 4][i][j] == 1) {
					if (tetris[y + i][x + j - 1] > 0) return false;
					else break;
				}
			}
		}
		return true;
	}
	bool CheckRight(int x, int y, int cnt) {
		for (int i = 0; i < 4; i++) //행
		{
			for (int j = 3; j >= 0; j--) //열
			{
				if (BLOCK[block][cnt % 4][i][j] == 1) {
					if (tetris[y + i][x + j + 1] > 0) return false;
					else break;
				}
			}
		}
		return true;
	}
	bool CheckUp(int x, int y, int cnt) {
		bool check = true;
		int x_temp = 3, y_temp = 3;
		//int x_temp = 4, y_temp = 4;
		//현재 블럭 모양 지움
		for (int i = 0; i < 4; i++)
			for (int j = 0; j < 4; j++)
				if (BLOCK[block][this->cnt % 4][i][j] == 1)
					if (tetris[y + i][x + j] == 1) tetris[y + i][x + j] = 0;
		//다음 블럭 모양 출력
		for (int i = 0; i < 4; i++) {
			for (int j = 0; j < 4; j++)
				if (BLOCK[block][cnt % 4][i][j] == 1) {
					if (tetris[y + i][x + j] == 0) tetris[y + i][x + j] = 1;
					else { //블록 또는 벽과 충돌했을 경우
						check = false;
						x_temp = j;
						y_temp = i;
						goto label;
					}
				}
		}
	label:
		//다음 블럭 모양 지움
		for (int i = 0; i <= y_temp; i++) {
			int temp = 3;
			if (i == y_temp) temp = x_temp - 1;
			for (int j = 0; j <= temp; j++)
				if (BLOCK[block][cnt % 4][i][j] == 1)
					if (tetris[y + i][x + j] == 1) tetris[y + i][x + j] = 0;
		}
		//현재 블럭 모양 출력
		for (int i = 0; i < 4; i++) {
			for (int j = 0; j < 4; j++)
				if (BLOCK[block][this->cnt % 4][i][j] == 1) tetris[y + i][x + j] = 1;
		}
		return check;
	}
	bool CheckFloor() {
		bool temp = true;
		for (int i = 3; i >= 0; i--)
		{
			for (int j = 0; j < 4; j++)
			{
				if (BLOCK[block][cnt % 4][i][j] == 1) {
					if (i != 3 && BLOCK[block][cnt % 4][i + 1][j] == 0) {
						if (tetris[y + i + 1][x + j] > 0) return true; //충돌 있다면 바로 종료
					}
					else if (i == 3) {
						if (tetris[y + i + 1][x + j] > 0) return true; //충돌 있다면 바로 종료
					}
				}
			}
		}
		return false;
	}
	void Move() {
		switch (KeyInput()) {
			case LEFT: if (CheckLeft(x, y, cnt)) { RemoveBlock(); Remove(); x--; Draw(); DrawBlock(); } break;
			case RIGHT:  if (CheckRight(x, y, cnt)) { RemoveBlock();  Remove(); x++; Draw(); DrawBlock(); } break;
			case DOWN: if (CheckFloor() == false) { RemoveBlock(); Remove(); y++; Draw(); DrawBlock(); } break;
			case UP: if (CheckUp(x, y, cnt + 1)) { RemoveBlock();  Remove(); cnt++; Draw();DrawBlock(); } break;
		}
	}
	int GetRotation() {
		rotation = cnt % 4;
		return rotation;
	}
	void RemoveBlock() {
		for (int i = 0; i < 4; i++) {
			int x_temp = x, y_temp = y; //T\ 내의 x, y좌표에 대해서
			//GotoXY(x_temp * 2, y_temp + i);
			for (int j = 0; j < 4; j++) {
				if (BLOCK[block][cnt % 4][i][j] == 1 && tetris[y + i][x + j] == 1) {
					GotoXY(x_temp * 2, y_temp + i);
					cout << "　";
				}
			}
		}
	}
	void DrawBlock() {
		//int x_temp = x+1, y_temp = y + 1;
		for (int i = 0; i < 4; i++) {
			int x_temp = x, y_temp = y + i + 1;
			for (int j = 0; j < 4; j++) {
				GotoXY((x_temp + j) * 2 + 2, y_temp);
				if(tetris[y + i][x + j]==1 && BLOCK[block][GetRotation()][i][j] == 1) cout << "■";
				//else if (tetris[y + i][x + j] == 0 && BLOCK[block][GetRotation()][i][j] == 0) cout << "　";
				/*
				switch (tetris[y+i][x+j]) {
					case 1: cout << "■"; break;
					case 2: cout << "▩"; break;
					//case 0: cout << "　";
				}
				*/
			}
		}
	}
	void Down() {
		if ((this->CheckFloor()) == false) {
			RemoveBlock();
			Remove();
			y++;
			Draw();
			DrawBlock();
		}
	}
};
void Test() {
	
}
void DrawScore() {
	GotoXY(38, 1);
	cout << "┌──────────┐";
	GotoXY(38, 2);
	cout << "│   SCORE  │";
	GotoXY(38, 3);
	cout << "├──────────┤";
	GotoXY(38, 4);
	cout << "│          │";
	GotoXY(38, 5);
	cout << "└──────────┘";
}
void DrawNext() {
	GotoXY(38, 7);
	cout << "┌───────────┐";
	GotoXY(38, 8);
	cout << "│ NEXT BLOCK│";
	GotoXY(38, 9);
	cout << "├───────────┤";
	GotoXY(38, 10);
	cout << "│           │";
	GotoXY(38, 11);
	cout << "│           │";
	GotoXY(38, 12);
	cout << "│           │";
	GotoXY(38, 13);
	cout << "│           │";
	GotoXY(38, 14);
	cout << "└───────────┘";
}
void DrawNextBlock(int block, int rotation) {
	for (int i = 0; i < 4; i++)
	{
		for (int j = 0; j < 4; j++)
		{
			GotoXY(42 + j * 2, 10 + i);
			if (BLOCK[block][rotation][i][j] == 1) cout << "■";
			else cout << "　";
		}
	}
}
void PrintScore() {
	GotoXY(40, 4);
	//cout << score;
	//Sleep(500);
	printf("%9d", score);
}
void CopyTetris() {
	for (int i = 0; i < HEIGHT; i++) { //할당 
		for (int j = 0; j < WIDTH; j++) {
			tempTetris[i][j] = tetris[i][j];
		}
	}
}
void DrawMap() {
	PrintScore();
	int temp_x = 2;
	for (int i = 0; i < HEIGHT; i++) { //출력 
		temp_x = 2;
		GotoXY(temp_x, i + 1); //여백 주기 위함 
		for (int j = 0; j < WIDTH; j++) {
			if (true) {
			//temp_x += 2;
			//if(tetris[i][j] != tempTetris[i][j]) {
				switch (tetris[i][j]) {
					case 1: cout << "■"; break;
					case 2: cout << "▩"; break;
					default: cout << "　";
				}
			}
		}
		cout << endl;
	}
	CopyTetris();
}
bool CheckOver() {
	for (int j = 1; j < WIDTH - 1; j++) {
		if (tetris[1][j] == 1) return false; //게임오버
	}
	return true; //게임 계속 진행
}
bool CheckRow() {
	int count;
	bool checkRow = false;
	for (int i = HEIGHT - 2; i > 0; i--) //i : 행. 0보다 클 때까지. 당연함. 0은 벽임.
	{
		count = 0;
		for (int j = 1; j < WIDTH - 1; j++) //j : 열
			if (tetris[i][j] == 1) count++;
		//한 줄이 다 찼을 때의 실행
		if (count == WIDTH - 2) {
			Sleep(600); //첨에는 Sleep이 DrawMap() 밑에 있었음!!
			score += 100; //점수 증가
			PrintScore(); //점수 출력
			checkRow = true;
			for (int q = i; q > 0; q--) //q : 행
			{
				for (int p = 1; p < WIDTH - p; p++) //p : 열
					if (tetris[q - 1][p] != 2) tetris[q][p] = tetris[q - 1][p];
			}
			DrawMap();
		}
	}
	return checkRow;
}
Block* block;
void BlockDownThread() {
	while (exe) {
		if ((block->CheckFloor()) == false) {
			//CopyTetris();
			Sleep(speed);
			block->Down();
			//DrawMap();
			
		}
	}
	//Sleep(1);
}
void CreateBlock() {
	srand((unsigned)time(0));
	int nowBlock = nextBlock;
	int nowRotation = nextRotation;
	nextBlock = rand() % 7;
	nextRotation = rand() % 4;
	DrawNextBlock(nextBlock, nextRotation);
	block = new Block(nowBlock, nowRotation);
	block->DrawBlock();
	exe = true;
	thread threadTest(BlockDownThread);
	while (true) {
		if (block->CheckFloor()) break; //참==바닥 -> 중지
		//CopyTetris();
		block->Move();

		//block->RemoveBlock();
		//block->Remove();
		//block->Draw();
		//block->DrawBlock();
	}
	exe = false;
	threadTest.join();
	block->~Block();
}
void DrawUser() {
	string user;
	cout << "※User 이름은 8글자 이내※" << endl;
	cout << " User 이름 입력: ";
	cin >> user;
	ofstream file("ranking.txt", ios::app); //이렇게 쓰면 굳이 close() 필요Xx
	//file.write(user.c_str(), user.size());
	//file.write(score, score);
	file << setw(2) << score << setw(10) << user << endl;
}
void DrawPlay() {
	system("cls");
	for (int i = 0; i < HEIGHT; i++) { //할당 
		for (int j = 0; j < WIDTH; j++) {
			if (i == 0 || i == HEIGHT - 1 || j == 0 || j == WIDTH - 1)
				tetris[i][j] = 2; //벽 
			else tetris[i][j] = 0; //공백 
		}
	}
	DrawMap();
	DrawScore();
	DrawNext();
}
int ShowPlay() {
	DrawPlay();
	PrintScore();
	CreateBlock();
	CopyTetris();
	//실행 while문 
	bool _playing = true;
	while (_playing) {
		bool _block = true;
		bool _checkRow = true;
		while (_block) {
			Sleep(600);
			//CreateBlock();
			thread createBlock(CreateBlock);
			_block = false;
			createBlock.join();
		}
		while (_checkRow) {
			_checkRow = CheckRow();
		}
		_playing = CheckOver();
	}
	Sleep(800);
	GotoXY(0, 31);
	cout << "=======================================================" << endl;
	cout << " 게임이 종료되었습니다." << endl;
	cout << " 점수 : " << score << endl;
	DrawUser();
	cout << "=======================================================" << endl;
	GotoXY(1, 36); //여백 주기 위함
	cout << endl << "※메인 화면으로 돌아가려면 Backspace를 누르세요" << endl;
	while (true) {
		if (_getch() == 8) break;
	}
	return 0;
}
int ShowRule() {
	system("cls");
	//임시 
	//방향키는 아예 게임 화면 옆에 있어도 괜찮을 듯 
	//수정 꼭 하자... 앞에 공백 주면 2번에서 문제 생김 
	cout << endl << "====================== 게임 규칙 ======================" << endl;
	cout << "1. 7가지 모양의 블럭들을 쌓아갑니다." << endl;
	cout << "2. 각 행이 블럭으로 채워질 때마다 해당 행은 사라지고\n   점수가 올라갑니다." << endl;
	//cout << "   2-1. 콤보 이벤트 발생 시 더 많은 점수를 받을 수 있습니다." << endl; 
	cout << "3. 블럭이 제한 선까지 쌓이는 순간 게임이 종료됩니다." << endl;
	cout << endl << endl << "======================== 방향키 ========================" << endl;
	cout << "조작은 키보드 입력을 기준으로 합니다." << endl;
	cout << "W : 블럭 회전(시계방향)\nA : 블럭 왼쪽으로 이동\nD : 블럭 오른쪽으로 이동\nS : 블럭 아래로 이동" << endl;
	cout << endl << "※메인 화면으로 돌아가려면 Backspace를 누르세요" << endl;
	if (_getch() == 8) return 0;
}
int ShowRank() {
	system("cls");
	cout << endl << "======================== RANKING =======================" << endl;
	cout << "RANKING 크게 만들어서 출력하기..." << endl;
	ifstream file("ranking.txt");
	int rank = 1;
	string userName;
	int x = 4, y = 8;
	int j = 2;
	GotoXY(x, y);
	cout << "┌────────────┬──────────────────┬───────────┐";
	GotoXY(x, y + 1);
	cout << "│    순위    │       이름       │    점수   │" << endl;
	for (int i = 0; i < 10; i++)
	{
		GotoXY(x, y + j++);
		cout << "│────────────┼──────────────────┼───────────│";
		GotoXY(x, y + j++);
		cout << "│            │                  │           │";
	}
	GotoXY(x, y + j);
	cout << "└────────────┴──────────────────┴───────────┘";
	int i = y + 1;
	while (file >> score >> userName) {
		GotoXY(x + 4, i += 2);
		cout << setw(2) << rank++ << "위";
		GotoXY(x + 16, i);
		cout << setw(16) << userName;
		GotoXY(x + 34, i);
		printf("%8d점", score);
		if (rank > 10)break;
		//cout << setw(8) << score << "점";
	}
	/*
	while (!file.eof()) {

	}*/
	GotoXY(23, 32);
	cout << "ㄴ(◑_◑)ㄱ";
	//printf("\u1F60E");
	GotoXY(1, 36);
	cout << endl << "※메인 화면으로 돌아가려면 Backspace를 누르세요" << endl;
	if (_getch() == 8) return 0;
}
int ShowMain() {
	system("cls");
	int selectKey = 0;
	GotoXY(24, 15);
	cout << "C++ Tetris" << endl << endl; //제목 크게 만들기 
	GotoXY(13, 17);
	cout << "UP : W | DOWN : S | SELECT : Enter";
	int x = 22, y = 21, _y = y;
	GotoXY(x, y);
	while (true) {
		GotoXY(x, y);
		cout << "  게임 시작";
		GotoXY(x, y + 1);
		cout << "  게임 방법";
		GotoXY(x, y + 2);
		cout << "  랭킹 보기";
		GotoXY(x, y + 3);
		cout << "    종료";
		GotoXY(x, _y);
		cout << "> ";
		int key = KeyInput();
		switch (key)
		{
		case UP:
			//if(GetCursorPos) 
			if (_y != 21)
				GotoXY(x, --_y);
			break;
		case DOWN:
			if (_y != 24)
				GotoXY(x, ++_y);
			break;
		case 13: //Enter키 아스키코드 값 
			switch (_y)
			{
			case 21: selectKey = 0; break;
			case 22: selectKey = 1; break;
			case 23: selectKey = 2; break;
			case 24: selectKey = 3; break;
			}
			goto skip;
		default: break;
		}
	}
skip:
	return selectKey;
}
int main() {
	system("mode con cols=56 lines=40");
	system("title C++ Tetris");
	srand((unsigned)time(0));
	ShowCursor();
	nextBlock = rand() % 7;
	nextRotation = rand() % 4;
	bool _while = true;
	while (_while) {
		int key = ShowMain();
		switch (key) {
		case 0: ShowPlay(); break;
		case 1: ShowRule(); break;
		case 2: ShowRank(); break;
		case 3: _while = false; break;
		}
	}
	GotoXY(0, 35);
	system("pause");
	return 0;
}
